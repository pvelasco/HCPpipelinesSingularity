#!/bin/bash

# This utility script demonstrates how to test run the Structural Preprocessing
# on a CCF LifeSpan subject either from within the HCPprocessPipelines.img Singularity
# container or from within the HCPprocessPipelinesSandbox.
#
# Directories that are bound from your local system to the container.
# -------------------------------------------------------------------
#
# If the assumptions listed below are not true in your environment, you may need
# to modify this script to run properly.
#
#   Data Directory
#   --------------
# 
#   This script assumes that you have a directory named:
#
#     ${HOME}/data/mystudy
#
#   The 'mystudy' directory is assumed to be in the standard HCP Pipelines format,
#   i.e. with subdirectories for each subject, with those subdirectories named with
#   the subject's ID.
#
#   The ${HOME}/data directory is mounted/bound and available within the HCPprocessPipelines
#   container or the HCPprocessPipelinesSandbox as the /data directory. Thus the value
#   specified for the --working-dir= parameter when running the processing script is
#   '/data/mystudy'.
#
#   Gradient Coefficient Files Directory
#   ------------------------------------
#
#   This script assumes that you have a directory named:
#
#     ${HOME}/projects/HCPpipelinesPrereqs/gradient_coefficients_files
#
#   That 'gradient_coefficients_files' directory is assumed to contain the proprietary
#   gradient distortion coefficients files for any scanners used in collecting your
#   image data files.
#
#   The ${HOME}/projects/.../gradient_coefficients_files directory is mounted/bound
#   within the HCPprocessPipelines container or the HCPprocessPipelinesSandbox as the
#   /export/HCP/gradient_coefficient_files directory. This is where the gradient
#   coefficients files must be found within the container.
#
#   FreeSurfer Licence File Directory
#   ---------------------------------
#
#   This script assumes that you have a directory named:
#
#     ${HOME}/projects/HCPpipelinesPrereqs/FreeSurferLicense
#
#   The 'FreeSurferLicense' directory is assumed to contain your FreeSurfer license
#   in a file named: 'license.txt'
#
#   The ${HOME}/projects/.../FreeSurferLicense directory is mounted/bound
#   within the HCPprocessPipelines container or the HCPprocessPipelinesSandbox as the
#   /export/freesurfer_license directory. This is where the 'license.txt' file must
#   be found within the container.

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_run_type

	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--run-type=*)
				g_run_type=${argument/*=/""}
				g_run_type=$(echo ${g_run_type} | tr '[:lower:]' '[:upper:]')
				index=$(( index + 1 ))
				;;
			--container)
				g_run_type="CONTAINER"
				index=$(( index + 1 ))
				;;
			--sandbox)
				g_run_type="SANDBOX"
				index=$(( index + 1 ))
				;;
			*)
				echo "Unrecognized option: ${argument}"
				exit 1
				;;
		esac

	done

	# check parameters

	if [ -z "${g_run_type}" ]; then
		echo "ERROR: run type (--run-type=[CONTAINER|SANDBOX], --container, or --sandbox) required"
		exit 1
	fi

	if [ "${g_run_type}" != "CONTAINER" -a "${g_run_type}" != "SANDBOX" ]; then 
		echo "ERROR: run type must be CONTAINER or SANDBOX"
		exit 1
	fi
}

main()
{
	get_options "$@"

	local run_cmd
	run_cmd=""

	# Base Singularity command
	if [ "${g_run_type}" = "CONTAINER" ]; then
		run_cmd+="singularity run"
	elif [ "${g_run_type}" = "SANDBOX" ]; then
		run_cmd+="sudo singularity exec"
	else
		echo "ERROR: Unrecognized run type: ${g_run_type}"
	fi

	# Bind your data directory
	# Needs to show up as the /data directory in the Container/Sandbox

	local where_data_are_on_my_system
	local where_data_must_be_in_container
	
	where_data_are_on_my_system="${HOME}/data"
	where_data_must_be_in_container="/data"
	
	run_cmd+=" -B ${where_data_are_on_my_system}:${where_data_must_be_in_container}"

	# Bind gradient coefficients files directory
	# Needs to show up as the /export/HCP/gradient_coefficient_files directory in the Container/Sandbox

	local where_gc_files_are_on_my_system
	local where_gc_files_must_be_in_container

	where_gc_files_are_on_my_system="${HOME}/projects/HCPpipelinesPrereqs/gradient_coefficients_files"
	where_gc_files_must_be_in_container="/export/HCP/gradient_coefficient_files"
	
	run_cmd+=" -B ${where_gc_files_are_on_my_system}:${where_gc_files_must_be_in_container}"

	# Bind folder with FreeSurfer License
	# Needs to show up as the /export/freesurfer_license directory in the Container/Sandbox
	# Must contain a file named 'license.txt'

	local where_license_file_is_on_my_system
	local where_license_file_must_be_in_container
	
	where_license_file_is_on_my_system="${HOME}/projects/HCPpipelinesPrereqs/FreeSurferLicense"
	where_license_file_must_be_in_container="/export/freesurfer_license"
	
	run_cmd+=" -B ${where_license_file_is_on_my_system}:${where_license_file_must_be_in_container}"
	
	# Specify command or script to run
	if [ "${g_run_type}" = "CONTAINER" ]; then
		# application in the container to run
		run_cmd+=" --app StructuralPreprocessing"
		# container image file
		run_cmd+=" HCPprocessPipelines.img"
	elif [ "${g_run_type}" = "SANDBOX" ]; then
		# sandbox directory 
		run_cmd+=" HCPprocessPipelinesSandbox/"
		# full path to script within sandbox to execute
		run_cmd+=" /pipeline_tools/hcp_pipelines_run_utils/StructuralPreprocessing/StructuralPreprocessing.SINGULARITY_PROCESS"
	else
		echo "ERROR: Unrecognized run type: ${g_run_type}"
	fi

	# Add command line parameters for command/script to run
	run_cmd+=" --working-dir=/data/mystudy" # Note: this path is from within the container
	run_cmd+=" --subject=HCA6005242"
	run_cmd+=" --classifier=V1_MR"
	run_cmd+=" --brainsize=150"

	run_cmd+=" --first-t1w-directory-name=T1w_MPR_vNav_4e_RMS"
	run_cmd+=" --first-t1w-file-name=HCA6005242_V1_MR_T1w_MPR_vNav_4e_RMS.nii.gz"

	run_cmd+=" --first-t2w-directory-name=T2w_SPC_vNav"
	run_cmd+=" --first-t2w-file-name=HCA6005242_V1_MR_T2w_SPC_vNav.nii.gz"

	run_cmd+=" --t1template=MNI152_T1_0.8mm.nii.gz"
	run_cmd+=" --t1templatebrain=MNI152_T1_0.8mm_brain.nii.gz"
	run_cmd+=" --t1template2mm=MNI152_T1_2mm.nii.gz"

	run_cmd+=" --t2template=MNI152_T2_0.8mm.nii.gz"
	run_cmd+=" --t2templatebrain=MNI152_T2_0.8mm_brain.nii.gz"
	run_cmd+=" --t2template2mm=MNI152_T2_2mm.nii.gz"

	run_cmd+=" --templatemask=MNI152_T1_0.8mm_brain_mask.nii.gz"
	run_cmd+=" --template2mmmask=MNI152_T1_2mm_brain_mask_dil.nii.gz"

	run_cmd+=" --fnirtconfig=T1_2_MNI152_2mm.cnf"
	run_cmd+=" --gdcoeffs=Prisma_3T_coeff_AS82.grad"
	run_cmd+=" --topupconfig=b02b0.cnf"

	run_cmd+=" --fieldmap-type=SpinEcho"
	run_cmd+=" --se-phase-pos=HCA6005242_V1_MR_SpinEchoFieldMap1_PA.nii.gz"
	run_cmd+=" --se-phase-neg=HCA6005242_V1_MR_SpinEchoFieldMap1_AP.nii.gz"

	echo "run_cmd: ${run_cmd}"

	time ${run_cmd}
}

# Invoke the main function to get things started
main "$@"

