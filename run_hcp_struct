#!/bin/bash

SCRIPT_NAME=$(basename "${0}")
DEFAULT_STUDY_DIR="${HOME}/data/mystudy"
DEFAULT_GRADIENT_COEFFS_DIR="${HOME}/projects/HCPpipelinesPrereqs/gradient_coefficients_files"
DEFAULT_FREESURFER_LICENSE_DIR="${HOME}/projects/HCPpipelinesPrereqs/FreeSurferLicense"

usage()
{
	cat <<EOF

${SCRIPT_NAME}: 

  This script demonstrates how to run Structural Preprocessing related applications 
  available within the HCPprocessPipelines.simg Singularity container or within the 
  corresponding HCPprocessPipelinesSandbox on HCP-YA subjects.

Usage: ${SCRIPT_NAME} PARAMETER ...

PARAMETERS are: [ ] = optional; < > = user supplied value

  [--help] : show this usage information and exit

  Path to study directory
  -----------------------

  [--study-dir=<path-to-study-directory>]

    The specified path will be bound (i.e. mounted) from your system
    to a known location (/study) in the container or sandbox. This is 
    where the study data must be found within the container or sandbox.

    It is assumed that your study directory contains subdirectories that 
    correspond to your subject IDs.

    If you do not specify a study directory, the study directory will 
    default to: ${DEFAULT_STUDY_DIR}.

  Path to gradient coefficients files
  -----------------------------------

  [--gradient-coeffs-dir=<path-to-gradient-coefficients-directory>]

    The specified path will be bound (i.e. mounted) from your system
    to a known location (/export/HCP/gradient_coefficient_files) in the
    container or sandbox. This is where the gradient coefficients
    files must be found within the container or sandbox.

    This gradient coefficients files directory must contain the
    proprietary gradient coefficients files for any scanners used in 
    collecting your image data files.

    If you do not specify a gradient coefficients files directory, it will
    default to: ${DEFAULT_GRADIENT_COEFFS_DIR}.  

    NOTE: The path to the gradient coefficients files is only necessary
    for actual processing of data. If you are running a completion
    check, you can allow this to take its default value even if that
    value is incorrect.  

  Path to FreeSurfer license file
  -------------------------------

  [--freesurfer-license-dir=<path-to-freesurfer-license-directory>]

    The specified path will be bound (i.e. mounted) from your system
    to a known location (/export/freesurfer_license) in the container
    or sandbox. This is where the FreeSurfer license file must be
    found within the container or sandbox.

    If you do not specify a FreeSurfer license directory, it will 
    default to: ${DEFAULT_FREESURFER_LICENSE_DIR}.

    NOTE: The path to the FreeSurfer license file is only necessary
    for actual processing of data. If you are running a completion
    check, you can allow this to take its default value even if that
    value is incorrect.  

  Specification of environment
  ----------------------------

    You must specify whether to perform the requested processing
    in the Singularity Container (HCPprocessPipelines.simg) or 
    in the Singularity Sandbox (HCPprocessPipelinesSandbox/).

    One of the following options must be specified:

      --env=[CONTAINER|SANDBOX]
      --container
      --sandbox

    The value specified for the --env= parameter is not case
    sensitive, but must be either CONTAINER or SANDBOX. For example, 
    --env=ConTAiner, --env=SandBox, and --env=sandbox
    are all valid, but --env=CONTAIN is not valid.

      --container is equivalent to --env=CONTAINER

      --sandbox is equivalent to --env=SANDBOX

    NOTE: To run within the Sandbox, you will need sudo privileges
    on the machine on which you are running. When commands are run
    with sudo, you may be prompted for your password to validate 
    your sudo privileges. 

  Subject List File
  -----------------

    You must specify a file containing a list of subject information lines. 

    Each line in the subject file must contain the following information:

      <subject-id>

    Anything after a # on a line is considered a comment. To comment out a subject
    information line, simply insert a # as the very first character on the line

    Each subject information line will be parsed and the container or sandbox will 
    be used to run the specified processing for the specified subject.

  Processing
  ----------

    This script will run the actual Structural Preprocessing for the specified 
    subjects. It is not implemented to run the completion check for Structural 
    Preprocessing.

EOF
}

abort()
{
	local error_msg
	error_msg="${1}"

	echo ""
	usage
	echo "--------------------------------------------------"
	echo "ERROR: ${error_msg}"
	echo "--------------------------------------------------"
	echo ""
	exit 1
}

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_subject_list_file
	g_study_dir="${DEFAULT_STUDY_DIR}"
	g_gradient_coeffs_dir="${DEFAULT_GRADIENT_COEFFS_DIR}"
	g_freesurfer_license_dir="${DEFAULT_FREESURFER_LICENSE_DIR}"
	unset g_env
	
	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--help)
				usage
				exit 1
				;;
			--study-dir=*)
				g_study_dir=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--gradient-coeffs_dir=*)
				g_gradient_coeffs_dir=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--freesurfer-license-dir=*)
				g_freesurfer_license_dir=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			--env=*)
				g_env=${argument/*=/""}
				g_env=$(echo ${g_run_type} | tr '[:lower:]' '[:upper:]')
				index=$(( index + 1 ))
				;;
			--container)
				g_run_type="CONTAINER"
				index=$(( index + 1 ))
				;;
			--sandbox)
				g_run_type="SANDBOX"
				index=$(( index + 1 ))
				;;
			--subject-list=*)
				g_subject_list_file=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			*)
				echo "Unrecognized option: ${argument}"
				exit 1
				;;
		esac

	done

	# check parameters

	if [ -n "${g_study_dir}" ]; then
		echo "INFO: study directory: ${g_study_dir}"
	else
		abort "--study-dir=<study-directory> must be specified"
	fi

	if [ -n "${g_gradient_coeffs_dir}" ]; then
		echo "INFO: gradient coefficients directory: ${g_gradient_coeffs_dir}"
	else
		abort "--gradient-coeffs-dir=<gradient-coeffs-directory> must be specified"
	fi

	if [ -n "${g_freesurfer_license_dir}" ]; then
		echo "INFO: FreeSurfer license directory: ${g_freesurfer_license_dir}"
	else
		abort "--freesurfer-license-dir=<freesurfer-license-directory> must be specified"
	fi
	
	if [ -z "${g_env}" ]; then
		abort "run type (--env=[CONTAINER|SANDBOX], --container, or --sandbox) required"
	fi

	if [ "${g_env}" != "CONTAINER" -a "${g_env}" != "SANDBOX" ]; then 
		abort "environment must be CONTAINER or SANDBOX"
	else
		echo "INFO: Environment: ${g_env}"
	fi

	if [ -n "${g_subject_list_file}" ]; then
		echo "INFO: running processing for subjects listed in file: ${g_subject_list_file}"
	else
		abort "--subject-list=<subject-list-filename> must be specified"
	fi
}

main()
{
	local line
	local run_cmd
	local subject_id
	local where_study_is_on_my_system
	local where_study_must_be_in_container
	local where_gc_files_are_on_my_system
	local where_gc_files_must_be_in_container
	local where_license_file_is_on_my_system
	local where_license_file_must_be_in_container

	get_options "$@"

	while read -r line; do
		
		# remove comments - anything after a #
		line=${line%%\#*}

		# trim leading and trailing whitespace
		line=$(echo ${line} | xargs)

		if [ -z "${line}" ]; then
			continue
		fi

		subject_id=${line}

		echo ""
		echo "-- Running processing for subject: ${subject_id} --"
		echo ""
		
		run_cmd=""

		# Base Singularity command
		if [ "${g_run_type}" = "CONTAINER" ]; then
			run_cmd+="singularity run"
		elif [ "${g_run_type}" = "SANDBOX" ]; then
			run_cmd+="sudo singularity exec"
		else
			abort "Unrecognized run type: ${g_run_type}"
		fi

		# Bind your study directory
		# Needs to show up as the /study directory in the Container/Sandbox
		where_study_is_on_my_system="${g_study_dir}"
		where_study_must_be_in_container="/study"

		run_cmd+=" -B ${where_study_is_on_my_system}:${where_study_must_be_in_container}"

		# Bind gradient coefficients files directory
		# Needs to show up as the /export/HCP/gradient_coefficient_files directory in the Container/Sandbox
		where_gc_files_are_on_my_system="${HOME}/projects/HCPpipelinesPrereqs/gradient_coefficients_files"
		where_gc_files_must_be_in_container="/export/HCP/gradient_coefficient_files"
	
		run_cmd+=" -B ${where_gc_files_are_on_my_system}:${where_gc_files_must_be_in_container}"

		# Bind folder with FreeSurfer License
		# Needs to show up as the /export/freesurfer_license directory in the Container/Sandbox
		# Must contain a file named 'license.txt'
		where_license_file_is_on_my_system="${HOME}/projects/HCPpipelinesPrereqs/FreeSurferLicense"
		where_license_file_must_be_in_container="/export/freesurfer_license"
	
		run_cmd+=" -B ${where_license_file_is_on_my_system}:${where_license_file_must_be_in_container}"

		# Specify command or script to run
		if [ "${g_env}" = "CONTAINER" ]; then
			# application in the container to run
			run_cmd+=" --app StructuralPreprocessing"
			# container image file
			run_cmd+=" HCPprocessPipelines.simg"
		elif [ "${g_env}" = "SANDBOX" ]; then
			# sandbox directory
			run_cmd+=" HCPprocessPipelinesSandbox/"
			# full path to script within sandbox to execute
			run_cmd+=" /pipeline_tools/HCPpipelinesRunUtils/StructuralPreprocessing/StructuralPreprocessing.SINGULARITY_PROCESS"
		else
			abort "Unrecognized run type: ${g_run_type}"
		fi

		# Add command line parameters for command/script to run
		run_cmd+=" --working-dir=/study"	# Note: this path is from within the container
		run_cmd+=" --subject=${subject_id}"
		run_cmd+=" --classifier=3T"
		run_cmd+=" --brainsize=150"

		run_cmd+=" --first-t1w-directory-name=T1w_MPR1"
		run_cmd+=" --first-t1w-file-name=${subject_id}_3T_T1w_MPR1.nii.gz"

		run_cmd+=" --first-t2w-directory-name=T2w_SPC1"
		run_cmd+=" --first-t2w-file-name=${subject_id}_3T_T2w_SPC1.nii.gz"

		run_cmd+=" --t1template=MNI152_T1_0.7mm.nii.gz"
		run_cmd+=" --t1templatebrain=MNI152_T1_0.7mm_brain.nii.gz"
		run_cmd+=" --t1template2mm=MNI152_T1_2mm.nii.gz"

		run_cmd+=" --t2template=MNI152_T2_0.7mm.nii.gz"
		run_cmd+=" --t2templatebrain=MNI152_T2_0.7mm_brain.nii.gz"
		run_cmd+=" --t2template2mm=MNI152_T2_2mm.nii.gz"

		run_cmd+=" --templatemask=MNI152_T1_0.7mm_brain_mask.nii.gz"
		run_cmd+=" --template2mmmask=MNI152_T1_2mm_brain_mask_dil.nii.gz"
		
		run_cmd+=" --fnirtconfig=T1_2_MNI152_2mm.cnf"
		run_cmd+=" --gdcoeffs=coeff_SC72C_Skyra.grad"
		run_cmd+=" --topupconfig=b02b0.cnf"
	
		run_cmd+=" --fieldmap-type=SiemensGradientEcho"

		echo "run_cmd: ${run_cmd}"

		time ${run_cmd}

	done < "${g_subject_list_file}"
}
			
# Invoke the main function to get things started
main "$@"
