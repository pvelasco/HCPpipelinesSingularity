#!/bin/bash

# This utility script demonstrates how to test run the Structural Preprocessing Completion
# Check on a CCF LifeSpan subject either from within the HCPprocessPipelines.img Singularity
# container or from within the HCPprocessPipelinesSandbox.
#
# This assumes that you have a subdirectory of your home directory named 'data' and that
# subdirectory contains another subdirectory named 'mystudy'. The 'mystudy' directory is
# in standard HCP Pipelines format, with subdirectories for each subject named with the
# subject's ID.
#
# The ${HOME}/data subdirectory is mounted and available within your HCPprocessPipelines
# container or the HCPprocessPipelinesSandbox as the /data directory.
# Thus the --working-dir= specification points to /data/mystudy.

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_run_type

	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--run-type=*)
				g_run_type=${argument/*=/""}
				g_run_type=$(echo ${g_run_type} | tr '[:lower:]' '[:upper:]')
				index=$(( index + 1 ))
				;;
			--container)
				g_run_type="CONTAINER"
				index=$(( index + 1 ))
				;;
			--sandbox)
				g_run_type="SANDBOX"
				index=$(( index + 1 ))
				;;
			--subject-list=*)
				g_subject_list_file=${argument/*=/""}
				index=$(( index + 1 ))
				;;
			*)
				echo "Unrecognized option: ${argument}"
				exit 1
				;;
		esac

	done

	# check parameters

	if [ -z "${g_run_type}" ]; then
		echo "ERROR: run type (--run-type=[CONTAINER|SANDBOX], --container, or --sandbox) required"
		exit 1
	fi

	if [ "${g_run_type}" != "CONTAINER" -a "${g_run_type}" != "SANDBOX" ]; then 
		echo "ERROR: run type must be CONTAINER or SANDBOX"
		exit 1
	fi

	if [ -n "${g_subject_list_file}" ]; then
		echo "INFO: running processing for subjects listed in file: ${g_subject_list_file}"
	else
		echo "ERROR: --subject-list=<subject-list-filename> must be specified"
		exit 1
	fi
}

main()
{
	local line
	local run_cmd
	local where_data_are_on_my_system
	local where_data_must_be_in_container

	get_options "$@"
	
	while read -r line; do
		# remove comments - anything after a #
		line=${line%%\#*}
		
		# trim leading and trailing whitespace
		line=$(echo ${line} | xargs)
		
		if [ -z "${line}" ]; then
			continue
		fi
			
		# break into subject_id, pos_fieldmap, and neg_fieldmap
		subject_id=${line%%:*}			# subject_id is everything before the first :
		line=${line#${subject_id}:} 	# strip subject_id and : from the front of line
		
		pos_fieldmap=${line%%:*}		# pos_fieldmap is everything before the first :
		line=${line#${pos_fieldmap}:}	# strip pos_fieldmap and : from the front of line
		
		neg_fieldmap=${line}			# neg_fieldmap is everything that is left

		echo ""
		echo "-- Checking completeness for subject: ${subject_id}:${pos_fieldmap}:${neg_fieldmap} --"
		echo ""

		run_cmd=""

		# Base Singularity command
		if [ "${g_run_type}" = "CONTAINER" ]; then
			run_cmd+="singularity run"
		elif [ "${g_run_type}" = "SANDBOX" ]; then
			run_cmd+="singularity exec"
		else
			echo "ERROR: Unrecognized run type: ${g_run_type}"
			exit 1
		fi

		# Bind your data directory
		# Needs to show up as the /data directory in the Container/Sandbox
		where_data_are_on_my_system="${HOME}/data"
		where_data_must_be_in_container="/data"

		run_cmd+=" -B ${where_data_are_on_my_system}:${where_data_must_be_in_container}"

		# Specify command or script to run
		if [ "${g_run_type}" = "CONTAINER" ]; then
			# application in the container to run
			run_cmd+=" --app StructuralPreprocessingCheckData"
			# container image file
			run_cmd+=" HCPprocessPipelines.img"
		elif [ "${g_run_type}" = "SANDBOX" ]; then
			# sandbox directory 
			run_cmd+=" HCPprocessPipelinesSandbox/"
			# full path to script within sandbox to execute
			run_cmd+=" /pipeline_tools/HCPpipelinesRunUtils/StructuralPreprocessing/StructuralPreprocessing.CHECK"
		else
			echo "ERROR: Unrecognized run type: ${g_run_type}"
			exit 1
		fi

		# Add command line parameters for command/script to run
		run_cmd+=" --working-dir=/data/mystudy"
		run_cmd+=" --subject=${subject_id}"
		run_cmd+=" --classifier=V1_MR"

		echo "run_cmd: ${run_cmd}"
		
		time ${run_cmd}

	done < "${g_subject_list_file}"
}

# Invoke the main function to get things started
main "$@"


			
